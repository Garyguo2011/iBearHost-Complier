Compilation : '(' "module" N Stmt* ')'

N : INT

Expr : '(' "int_literal" N INT ')' | StringLiteral
| VarRef
| SpecialId
| '(' "next_value" N ')'
| '(' "call" N Expr Expr* ')'
| '(' "call" N TypeId Expr* ')'
| '(' "binop" N Id Expr Expr ')'
| '(' "left_compare" N Id Expr Expr ')' | '(' "compare" N Id Expr Expr ')'
| '(' "unop" N Id Expr ')'
| '(' "subscript" N Id Expr ')'
| '(' "slice" N Id Expr Expr ')'
| '(' "if_expr" N Expr Expr Expr ')'
| '(' "and" N Expr Expr ')'
| '(' "or" N Expr Expr ')'
| '(' "tuple" N Expr* ')'
| '(' "list_display" N Expr* ')'
| '(' "dict_display" N Pair* ')'

StringLiteral:
'(' "string_literal" N STRING ')'

Id : '(' "id" N ID ')'

SpecialId : '(' "None" N ')' 
	| '(' "True" N ')'
	| '(' "False" N ')'

VarRef: 
	Id
	| '(' "attributeref" N Expr Id ')' Pair : '(' "pair" N Expr Expr ')'

Pair : '(' "pair" N Expr Expr ')'


Stmt : Expr
| Assign
| StmtList
| '(' "print" N Expr* ')' | '(' "println" N Expr* ')' | '(' "return" N Expr ')'
| '(' "break" N ')'
| '(' "continue" N ')'
| '(' "if" N Expr Stmt Stmt? ')'
| '(' "while" N Expr Stmt Stmt? ')'
| '(' "for" N TargetList Expr
			  Stmt Stmt? ')'
| '(' "def" N Id Formals Type? Block ')'
| '(' "class" N Id TypeFormals Block ')'
| '(' "native" N StringLiteral ')'

Assign :
	'(' "assign" N TargetList RightSide ')'

StmtList : '(' "stmt_list" N Stmt* ')'

Block : '(' "block" N Stmt* ')'

RightSide : Expr | Assign

Target:
	VarRef
	| '(' "subscript_assign" N Id Expr Expr ')'
	| '(' "slice_assign" N Id Expr Expr Expr ')'
	| TypedId

TargetList:
	Target
	| '(' "target_list" N Target+ ')'

Formals : '(' "formals_list" N (Id | TypedId)* ')'

TypedId : '(' "typed_id" N Id Type ')'

Type : TypeId
	| TypeVar
	| '(' "function_type" N Type TypeList0 ')'

TypeId : '(' "type" N Id TypeList0 ')'

TypeVar : '(' "type_var" N ID ')'

TypeList0 : '(' "type_list" N Type* ')'

TypeFormals: '(' "type_formals_list" N TypeVar* ')'
