Terminals unused in grammar

   "call1"
   DEDENT
   "expr_list"
   INDENT
   "@method"
   "not"
   TYPE_VAR
   "new"


Grammar

    0 $accept: program $end

    1 program: expr

    2 expr: "(" ast_node_type "int_literal" operands ")"
    3     | "(" "id" "int_literal" id ")"
    4     | "(" "int_literal" "int_literal" "int_literal" ")"
    5     | "(" "string_literal" "int_literal" STRING_LITERAL ")"
    6     | "(" "type_var" "int_literal" TYPE_VAR_ID ")"

    7 operands: __0

    8 ast_node_type: "and"
    9              | "assign"
   10              | "attributeref"
   11              | "binop"
   12              | "block"
   13              | "break"
   14              | "call"
   15              | "class"
   16              | "compare"
   17              | "continue"
   18              | "def"
   19              | "dict_display"
   20              | "False"
   21              | "for"
   22              | "formals_list"
   23              | "function_type"
   24              | "if"
   25              | "if_expr"
   26              | "left_compare"
   27              | "list_display"
   28              | "module"
   29              | "native"
   30              | "next_value"
   31              | "None"
   32              | "or"
   33              | "pair"
   34              | "print"
   35              | "println"
   36              | "return"
   37              | "slice"
   38              | "slice_assign"
   39              | "stmt_list"
   40              | "subscript"
   41              | "subscript_assign"
   42              | "target_list"
   43              | "True"
   44              | "tuple"
   45              | "type"
   46              | "typed_id"
   47              | "type_formals_list"
   48              | "type_list"
   49              | "unop"
   50              | "while"

   51 id: ID
   52   | ast_node_type
   53   | "id"
   54   | "int_literal"
   55   | "string_literal"
   56   | "type_var"

   57 __0: /* empty */
   58    | __0 expr


Terminals, with rules where they appear

$end (0) 0
"(" (40) 2 3 4 5 6
")" (41) 2 3 4 5 6
error (256)
"and" (258) 8
"assign" (259) 9
"attributeref" (260) 10
"binop" (261) 11
"block" (262) 12
"break" (263) 13
"call" (264) 14
"call1" (265)
"class" (266) 15
"compare" (267) 16
"continue" (268) 17
DEDENT (269)
"def" (270) 18
"dict_display" (271) 19
"False" (272) 20
"for" (273) 21
"formals_list" (274) 22
"function_type" (275) 23
"expr_list" (276)
ID (277) 51
"if" (278) 24
"if_expr" (279) 25
INDENT (280)
"int_literal" (281) 2 3 4 5 6 54
"left_compare" (282) 26
"list_display" (283) 27
"@method" (284)
"module" (285) 28
"native" (286) 29
"next_value" (287) 30
"None" (288) 31
"not" (289)
"or" (290) 32
"pair" (291) 33
"print" (292) 34
"println" (293) 35
"return" (294) 36
"slice" (295) 37
"slice_assign" (296) 38
"stmt_list" (297) 39
STRING_LITERAL (298) 5
"subscript" (299) 40
"subscript_assign" (300) 41
"target_list" (301) 42
"True" (302) 43
"tuple" (303) 44
"type" (304) 45
"typed_id" (305) 46
"type_formals_list" (306) 47
"type_list" (307) 48
TYPE_VAR (308)
"unop" (309) 49
"while" (310) 50
"new" (311)
"id" (312) 3 53
"string_literal" (313) 5 55
"type_var" (314) 6 56
TYPE_VAR_ID (315) 6


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
program (64)
    on left: 1, on right: 0
expr (65)
    on left: 2 3 4 5 6, on right: 1 58
operands (66)
    on left: 7, on right: 2
ast_node_type (67)
    on left: 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
    27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
    48 49 50, on right: 2 52
id (68)
    on left: 51 52 53 54 55 56, on right: 3
__0 (69)
    on left: 57 58, on right: 7 58


state 0

    0 $accept: . program $end

    "("  shift, and go to state 1

    program  go to state 2
    expr     go to state 3


state 1

    2 expr: "(" . ast_node_type "int_literal" operands ")"
    3     | "(" . "id" "int_literal" id ")"
    4     | "(" . "int_literal" "int_literal" "int_literal" ")"
    5     | "(" . "string_literal" "int_literal" STRING_LITERAL ")"
    6     | "(" . "type_var" "int_literal" TYPE_VAR_ID ")"

    "and"                shift, and go to state 4
    "assign"             shift, and go to state 5
    "attributeref"       shift, and go to state 6
    "binop"              shift, and go to state 7
    "block"              shift, and go to state 8
    "break"              shift, and go to state 9
    "call"               shift, and go to state 10
    "class"              shift, and go to state 11
    "compare"            shift, and go to state 12
    "continue"           shift, and go to state 13
    "def"                shift, and go to state 14
    "dict_display"       shift, and go to state 15
    "False"              shift, and go to state 16
    "for"                shift, and go to state 17
    "formals_list"       shift, and go to state 18
    "function_type"      shift, and go to state 19
    "if"                 shift, and go to state 20
    "if_expr"            shift, and go to state 21
    "int_literal"        shift, and go to state 22
    "left_compare"       shift, and go to state 23
    "list_display"       shift, and go to state 24
    "module"             shift, and go to state 25
    "native"             shift, and go to state 26
    "next_value"         shift, and go to state 27
    "None"               shift, and go to state 28
    "or"                 shift, and go to state 29
    "pair"               shift, and go to state 30
    "print"              shift, and go to state 31
    "println"            shift, and go to state 32
    "return"             shift, and go to state 33
    "slice"              shift, and go to state 34
    "slice_assign"       shift, and go to state 35
    "stmt_list"          shift, and go to state 36
    "subscript"          shift, and go to state 37
    "subscript_assign"   shift, and go to state 38
    "target_list"        shift, and go to state 39
    "True"               shift, and go to state 40
    "tuple"              shift, and go to state 41
    "type"               shift, and go to state 42
    "typed_id"           shift, and go to state 43
    "type_formals_list"  shift, and go to state 44
    "type_list"          shift, and go to state 45
    "unop"               shift, and go to state 46
    "while"              shift, and go to state 47
    "id"                 shift, and go to state 48
    "string_literal"     shift, and go to state 49
    "type_var"           shift, and go to state 50

    ast_node_type  go to state 51


state 2

    0 $accept: program . $end

    $end  shift, and go to state 52


state 3

    1 program: expr .

    $default  reduce using rule 1 (program)


state 4

    8 ast_node_type: "and" .

    $default  reduce using rule 8 (ast_node_type)


state 5

    9 ast_node_type: "assign" .

    $default  reduce using rule 9 (ast_node_type)


state 6

   10 ast_node_type: "attributeref" .

    $default  reduce using rule 10 (ast_node_type)


state 7

   11 ast_node_type: "binop" .

    $default  reduce using rule 11 (ast_node_type)


state 8

   12 ast_node_type: "block" .

    $default  reduce using rule 12 (ast_node_type)


state 9

   13 ast_node_type: "break" .

    $default  reduce using rule 13 (ast_node_type)


state 10

   14 ast_node_type: "call" .

    $default  reduce using rule 14 (ast_node_type)


state 11

   15 ast_node_type: "class" .

    $default  reduce using rule 15 (ast_node_type)


state 12

   16 ast_node_type: "compare" .

    $default  reduce using rule 16 (ast_node_type)


state 13

   17 ast_node_type: "continue" .

    $default  reduce using rule 17 (ast_node_type)


state 14

   18 ast_node_type: "def" .

    $default  reduce using rule 18 (ast_node_type)


state 15

   19 ast_node_type: "dict_display" .

    $default  reduce using rule 19 (ast_node_type)


state 16

   20 ast_node_type: "False" .

    $default  reduce using rule 20 (ast_node_type)


state 17

   21 ast_node_type: "for" .

    $default  reduce using rule 21 (ast_node_type)


state 18

   22 ast_node_type: "formals_list" .

    $default  reduce using rule 22 (ast_node_type)


state 19

   23 ast_node_type: "function_type" .

    $default  reduce using rule 23 (ast_node_type)


state 20

   24 ast_node_type: "if" .

    $default  reduce using rule 24 (ast_node_type)


state 21

   25 ast_node_type: "if_expr" .

    $default  reduce using rule 25 (ast_node_type)


state 22

    4 expr: "(" "int_literal" . "int_literal" "int_literal" ")"

    "int_literal"  shift, and go to state 53


state 23

   26 ast_node_type: "left_compare" .

    $default  reduce using rule 26 (ast_node_type)


state 24

   27 ast_node_type: "list_display" .

    $default  reduce using rule 27 (ast_node_type)


state 25

   28 ast_node_type: "module" .

    $default  reduce using rule 28 (ast_node_type)


state 26

   29 ast_node_type: "native" .

    $default  reduce using rule 29 (ast_node_type)


state 27

   30 ast_node_type: "next_value" .

    $default  reduce using rule 30 (ast_node_type)


state 28

   31 ast_node_type: "None" .

    $default  reduce using rule 31 (ast_node_type)


state 29

   32 ast_node_type: "or" .

    $default  reduce using rule 32 (ast_node_type)


state 30

   33 ast_node_type: "pair" .

    $default  reduce using rule 33 (ast_node_type)


state 31

   34 ast_node_type: "print" .

    $default  reduce using rule 34 (ast_node_type)


state 32

   35 ast_node_type: "println" .

    $default  reduce using rule 35 (ast_node_type)


state 33

   36 ast_node_type: "return" .

    $default  reduce using rule 36 (ast_node_type)


state 34

   37 ast_node_type: "slice" .

    $default  reduce using rule 37 (ast_node_type)


state 35

   38 ast_node_type: "slice_assign" .

    $default  reduce using rule 38 (ast_node_type)


state 36

   39 ast_node_type: "stmt_list" .

    $default  reduce using rule 39 (ast_node_type)


state 37

   40 ast_node_type: "subscript" .

    $default  reduce using rule 40 (ast_node_type)


state 38

   41 ast_node_type: "subscript_assign" .

    $default  reduce using rule 41 (ast_node_type)


state 39

   42 ast_node_type: "target_list" .

    $default  reduce using rule 42 (ast_node_type)


state 40

   43 ast_node_type: "True" .

    $default  reduce using rule 43 (ast_node_type)


state 41

   44 ast_node_type: "tuple" .

    $default  reduce using rule 44 (ast_node_type)


state 42

   45 ast_node_type: "type" .

    $default  reduce using rule 45 (ast_node_type)


state 43

   46 ast_node_type: "typed_id" .

    $default  reduce using rule 46 (ast_node_type)


state 44

   47 ast_node_type: "type_formals_list" .

    $default  reduce using rule 47 (ast_node_type)


state 45

   48 ast_node_type: "type_list" .

    $default  reduce using rule 48 (ast_node_type)


state 46

   49 ast_node_type: "unop" .

    $default  reduce using rule 49 (ast_node_type)


state 47

   50 ast_node_type: "while" .

    $default  reduce using rule 50 (ast_node_type)


state 48

    3 expr: "(" "id" . "int_literal" id ")"

    "int_literal"  shift, and go to state 54


state 49

    5 expr: "(" "string_literal" . "int_literal" STRING_LITERAL ")"

    "int_literal"  shift, and go to state 55


state 50

    6 expr: "(" "type_var" . "int_literal" TYPE_VAR_ID ")"

    "int_literal"  shift, and go to state 56


state 51

    2 expr: "(" ast_node_type . "int_literal" operands ")"

    "int_literal"  shift, and go to state 57


state 52

    0 $accept: program $end .

    $default  accept


state 53

    4 expr: "(" "int_literal" "int_literal" . "int_literal" ")"

    "int_literal"  shift, and go to state 58


state 54

    3 expr: "(" "id" "int_literal" . id ")"

    "and"                shift, and go to state 4
    "assign"             shift, and go to state 5
    "attributeref"       shift, and go to state 6
    "binop"              shift, and go to state 7
    "block"              shift, and go to state 8
    "break"              shift, and go to state 9
    "call"               shift, and go to state 10
    "class"              shift, and go to state 11
    "compare"            shift, and go to state 12
    "continue"           shift, and go to state 13
    "def"                shift, and go to state 14
    "dict_display"       shift, and go to state 15
    "False"              shift, and go to state 16
    "for"                shift, and go to state 17
    "formals_list"       shift, and go to state 18
    "function_type"      shift, and go to state 19
    ID                   shift, and go to state 59
    "if"                 shift, and go to state 20
    "if_expr"            shift, and go to state 21
    "int_literal"        shift, and go to state 60
    "left_compare"       shift, and go to state 23
    "list_display"       shift, and go to state 24
    "module"             shift, and go to state 25
    "native"             shift, and go to state 26
    "next_value"         shift, and go to state 27
    "None"               shift, and go to state 28
    "or"                 shift, and go to state 29
    "pair"               shift, and go to state 30
    "print"              shift, and go to state 31
    "println"            shift, and go to state 32
    "return"             shift, and go to state 33
    "slice"              shift, and go to state 34
    "slice_assign"       shift, and go to state 35
    "stmt_list"          shift, and go to state 36
    "subscript"          shift, and go to state 37
    "subscript_assign"   shift, and go to state 38
    "target_list"        shift, and go to state 39
    "True"               shift, and go to state 40
    "tuple"              shift, and go to state 41
    "type"               shift, and go to state 42
    "typed_id"           shift, and go to state 43
    "type_formals_list"  shift, and go to state 44
    "type_list"          shift, and go to state 45
    "unop"               shift, and go to state 46
    "while"              shift, and go to state 47
    "id"                 shift, and go to state 61
    "string_literal"     shift, and go to state 62
    "type_var"           shift, and go to state 63

    ast_node_type  go to state 64
    id             go to state 65


state 55

    5 expr: "(" "string_literal" "int_literal" . STRING_LITERAL ")"

    STRING_LITERAL  shift, and go to state 66


state 56

    6 expr: "(" "type_var" "int_literal" . TYPE_VAR_ID ")"

    TYPE_VAR_ID  shift, and go to state 67


state 57

    2 expr: "(" ast_node_type "int_literal" . operands ")"

    $default  reduce using rule 57 (__0)

    operands  go to state 68
    __0       go to state 69


state 58

    4 expr: "(" "int_literal" "int_literal" "int_literal" . ")"

    ")"  shift, and go to state 70


state 59

   51 id: ID .

    $default  reduce using rule 51 (id)


state 60

   54 id: "int_literal" .

    $default  reduce using rule 54 (id)


state 61

   53 id: "id" .

    $default  reduce using rule 53 (id)


state 62

   55 id: "string_literal" .

    $default  reduce using rule 55 (id)


state 63

   56 id: "type_var" .

    $default  reduce using rule 56 (id)


state 64

   52 id: ast_node_type .

    $default  reduce using rule 52 (id)


state 65

    3 expr: "(" "id" "int_literal" id . ")"

    ")"  shift, and go to state 71


state 66

    5 expr: "(" "string_literal" "int_literal" STRING_LITERAL . ")"

    ")"  shift, and go to state 72


state 67

    6 expr: "(" "type_var" "int_literal" TYPE_VAR_ID . ")"

    ")"  shift, and go to state 73


state 68

    2 expr: "(" ast_node_type "int_literal" operands . ")"

    ")"  shift, and go to state 74


state 69

    7 operands: __0 .
   58 __0: __0 . expr

    "("  shift, and go to state 1

    $default  reduce using rule 7 (operands)

    expr  go to state 75


state 70

    4 expr: "(" "int_literal" "int_literal" "int_literal" ")" .

    $default  reduce using rule 4 (expr)


state 71

    3 expr: "(" "id" "int_literal" id ")" .

    $default  reduce using rule 3 (expr)


state 72

    5 expr: "(" "string_literal" "int_literal" STRING_LITERAL ")" .

    $default  reduce using rule 5 (expr)


state 73

    6 expr: "(" "type_var" "int_literal" TYPE_VAR_ID ")" .

    $default  reduce using rule 6 (expr)


state 74

    2 expr: "(" ast_node_type "int_literal" operands ")" .

    $default  reduce using rule 2 (expr)


state 75

   58 __0: __0 expr .

    $default  reduce using rule 58 (__0)
