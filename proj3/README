The files here are intended to be helpful, NOT to limit what you can do.
>>Ignore them entirely, if you prefer!<<  However, as indicated in the handout,
whatever you turn in must satisfy the following criteria:

1. 'make' must compile your program from scratch, producing an executable
   file 'apyc' in this directory.
2. 'make check' must run all your tests against your ./apyc program.
3. 'make APYC=PROG check' must run all your tests against the program
   PROG.
4. The command
      ./apyc -o BAR FOO1.py
   should produce an executable program BAR.  
      ./apyc -c -o BAR FOO.py
   should produce the C, C++, or assembly language program BAR that is 
   compiled to generate the executable.
5. Your program must exit with code 1 if there are any errors in any of the
   files, or if there are other errors (such as missing, unreadable, 
   or unwritable files).  It must produce a proper error message for syntax
   errors.
6. Your program must exit with code 0 otherwise.

Don't let anything in your finished program remain mysterious to you.
Try to understand everything that's here, and if you can't, then feel
free to ask us what's going on.

We judge your program by how it runs ON THE INSTRUCTIONAL SYSTEMS.  It's 
no good protesting that it works at home; your "customer" is not running on 
your home setup!

Be sure to submit your program properly (by tagging in your team's (NOT your
personal) directory as proj3-N for integer numeral N.  I further suggest
that you check out and test the tagged submission in a fresh directory 
to make sure you've submitted what you think you have.

The current contents of the files here are extremely skeletal.  Don't expect
that just because you see a class in the skeleton, it is complete.  
Furthermore, you are free to change or discard ANY PART of it as long
as your final program works according to spec.

Likewise, the tests are completely inadequate.

If you add a new source file, be sure to modify Makefile appropriately,
and 'git add' it as well.  If you remove a file, modify Makefile and 
'git rm' the old file.  Whenever you add or remove a file, or add, 
remove or modify an #include statement, be sure to run 'make depend'.
This keeps the Makefile informed of what depends on what.

MANIFEST:

  Makefile:   General directions for building and testing the program.
  README:     This file.
  staff-version: A tag file used to identify the version of the staff
                 skeleton that was last merged into the source
                 files.

  Directory src/
        Makefile    General instructions for building and testing the program.
	apyc.cc:    Contains the main program and some general utilities.
	apyc.h:     Some high-level interfaces between modules.
	dast.h:     Base classes for AST nodes.
	dast.cc:    Method definitions for base classes and
     	            definitions for a few widely used AST subtypes.
        exprs.cc:   AST subclass definitions for expression-related types.
	stmts.cc:   AST subclass definitions for statement-related types.
	tokens.cc:  Definitions of token (leaf) AST subclasses.
        types.cc:   Definitions of nodes representing types.
        decls.cc:   Definitions related to declarations.
        modules.cc: Definitions related to modules.

	dast.hn:    Parser/lexer for decorated AST files from phase 2.
        apyc2       A link to the apyc command in project 2.


  tests/
      test-proj3:  A testing script for project 3.  It
	       runs the compiler, runs the result, and checks the output.

      correct3/     Tests that are supposed to be correct programs
	       for phase 2:
	  hello.py, hello.std:
	       A sample program and expected output file.
      error3/       Tests of programs with runtime errors.
          bad-subscript-1.py:
               A sample erroneous program.

   lib/apyc
      runtime.h     A .h file to be included by your generated code.
      runtime.cc    The runtime library, compiled along with your generated code.
       

