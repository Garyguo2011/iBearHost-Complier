#!/usr/bin/env python
# -*- Python -*-

# Test compiler against suite of Python programs.  

import os, sys, re
from subprocess import Popen, PIPE
from getopt import getopt, GetoptError

def Usage():
    print '''
Usage: test-proj3 [ --errors ] [ --compiler=COMPILER ] DIR/BASE.py ...
    Runs COMPILER (default ./apyc) on each DIR/BASE.py with the command
        COMPILER -o BASE BASE.py
    In the absence of the --errors option, runs the resulting program (BASE).
    If there is a file DIR/BASE.in, uses that as the standard input.  
    Otherwise, uses the empty file for the standard input.  Compares 
    the output to file DIR/BASE.std, if that is present, and otherwise
    just checks that the compiled program exits normally.  

    With the --errors option, checks that the program exits with a
    non-zero exit code.

    Reports results and exits with 0 if there are no errors, and
    with 1 otherwise.'''

def Run(command, *args, **keys):
    if args:
        command = command % args
    proc = Popen (command, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    out, err = proc.communicate(keys.get ('stdin', ''))
    return proc.returncode, out, err

def Remove(file):
    try:
        os.unlink(file)
    except OSError:
        pass

def Contents(file):
    try: 
        f = open(file)
        r = f.read()
        f.close()
        return r
    except:
        return ""

def Compile(prog, executable):
    global Stdout, Stderr, RC
    RC, Stdout, Stderr = Run("%s -o %s %s", compiler, executable, prog)
    return RC == 0

def Execute(prog, inp):
    global Stdout, Stderr, RC
    RC, Stdout, Stderr = Run("./%s", prog, stdin=inp)
    return RC == 0

def HasError(errout):
    return re.search (r'(?m)^[^:]+\.py:\d+:\s*\S', errout)

try:
    opts, tests = getopt (sys.argv[1:], 'h',
                          ['help', 'errors', 'compiler='])
except GetoptError:
    Usage()
    sys.exit(1)

compiler = './apyc'
errors = False
retain = False
runtime = None

for opt, val in opts:
    if opt in ( '-h', '--help' ):
        Usage()
        sys.exit(0)
    elif opt == '--errors':
        errors = True
    elif opt == '--compiler':
        compiler = val

N = 0
OK = 0

for f in tests:
    N += 1
    dir, file = os.path.split(f)
    base, ext = os.path.splitext(file)
    print base + ".py:",

    executable = base
    prog2 = base + "-2.py"
    inp = os.path.join(dir, base + ".in")
    std = Contents (os.path.join(dir, base + ".std"))
    msg = "OK"
    if not Compile(f, executable):
        msg = "FAIL (compilation failed)"
    elif Stderr:
        msg = "FAIL (error messages from compiler)"
    elif errors:
        if Execute(executable, Contents(inp)) or not Stderr:
            msg = "FAIL (execution errors not caught)"
    elif not Execute(executable, Contents(inp)) or Stderr:
        msg = "FAIL (execution error)"
    elif std and std != Stdout:
        print '---------*.std---------'
        print std
        print '---------my output-----------'
        print Stdout
        msg = "FAIL (wrong output)"
    Remove(executable)

    if msg == "OK":
        OK += 1
    print msg

print
print "Ran %d tests." % N,
if OK == N:
    print "All passed."
    sys.exit(0)
else:
    print "%d failed." % (N - OK)
    sys.exit(1)

