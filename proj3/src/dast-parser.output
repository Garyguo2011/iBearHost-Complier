Terminals unused in grammar

   DEDENT
   INDENT
   "not"
   TYPE_VAR


Grammar

    0 $accept: program $end

    1 program: expr decls

    2 expr: "(" ast_node_type "int_literal" operands ")"
    3     | "(" "id" "int_literal" id index ")"
    4     | "(" "int_literal" "int_literal" "int_literal" ")"
    5     | "(" "string_literal" "int_literal" STRING_LITERAL ")"
    6     | "(" "type_var" "int_literal" TYPE_VAR_ID index ")"

    7 operands: __0

    8 ast_node_type: "and"
    9              | "assign"
   10              | "attributeref"
   11              | "binop"
   12              | "break"
   13              | "call"
   14              | "call1"
   15              | "class"
   16              | "compare"
   17              | "continue"
   18              | "def"
   19              | "dict_display"
   20              | "False"
   21              | "for"
   22              | "formals_list"
   23              | "function_type"
   24              | "if"
   25              | "if_expr"
   26              | "left_compare"
   27              | "list_display"
   28              | "method"
   29              | "module"
   30              | "native"
   31              | "next_value"
   32              | "new"
   33              | "None"
   34              | "or"
   35              | "pair"
   36              | "print"
   37              | "println"
   38              | "return"
   39              | "slice"
   40              | "slice_assign"
   41              | "stmt_list"
   42              | "subscript"
   43              | "subscript_assign"
   44              | "target_list"
   45              | "True"
   46              | "tuple"
   47              | "type"
   48              | "typed_id"
   49              | "type_formals_list"
   50              | "type_list"
   51              | "unop"
   52              | "while"

   53 id: ID
   54   | other_id

   55 other_id: ast_node_type
   56         | "id"
   57         | "int_literal"
   58         | "string_literal"
   59         | "type_var"
   60         | "vardecl"
   61         | "typevardecl"
   62         | "paramdecl"
   63         | "instancedecl"
   64         | "funcdecl"
   65         | "classdecl"
   66         | "moduledecl"
   67         | "index_list"

   68 decls: /* empty */
   69      | decls decl

   70 decl: "(" "vardecl" index ID decl_ref type ")"
   71     | "(" "typevardecl" index TYPE_VAR_ID type ")"
   72     | "(" "paramdecl" index ID decl_ref "int_literal" type ")"
   73     | "(" "instancedecl" index ID decl_ref type ")"
   74     | "(" "funcdecl" index ID decl_ref type index_list ")"
   75     | "(" "classdecl" index ID index_list index_list ")"
   76     | "(" "moduledecl" index ID index_list ")"

   77 type: expr

   78 index: "int_literal"

   79 decl_ref: "int_literal"

   80 index_list: "(" "index_list" __1 ")"

   81 __0: /* empty */
   82    | __0 expr

   83 __1: /* empty */
   84    | __1 decl_ref


Terminals, with rules where they appear

$end (0) 0
"(" (40) 2 3 4 5 6 70 71 72 73 74 75 76 80
")" (41) 2 3 4 5 6 70 71 72 73 74 75 76 80
error (256)
"and" (258) 8
"assign" (259) 9
"attributeref" (260) 10
"binop" (261) 11
"break" (262) 12
"call" (263) 13
"call1" (264) 14
"class" (265) 15
"compare" (266) 16
"continue" (267) 17
DEDENT (268)
"def" (269) 18
"dict_display" (270) 19
"False" (271) 20
"for" (272) 21
"formals_list" (273) 22
"function_type" (274) 23
ID (275) 53 70 72 73 74 75 76
"if" (276) 24
"if_expr" (277) 25
INDENT (278)
"int_literal" (279) 2 3 4 5 6 57 72 78 79
"left_compare" (280) 26
"list_display" (281) 27
"method" (282) 28
"module" (283) 29
"native" (284) 30
"next_value" (285) 31
"new" (286) 32
"None" (287) 33
"not" (288)
"or" (289) 34
"pair" (290) 35
"print" (291) 36
"println" (292) 37
"return" (293) 38
"slice" (294) 39
"slice_assign" (295) 40
"stmt_list" (296) 41
STRING_LITERAL (297) 5
"subscript" (298) 42
"subscript_assign" (299) 43
"target_list" (300) 44
"True" (301) 45
"tuple" (302) 46
"type" (303) 47
"typed_id" (304) 48
"type_formals_list" (305) 49
"type_list" (306) 50
TYPE_VAR (307)
"unop" (308) 51
"while" (309) 52
"classdecl" (310) 65 75
"funcdecl" (311) 64 74
"id" (312) 3 56
"index_list" (313) 67 80
"instancedecl" (314) 63 73
"moduledecl" (315) 66 76
"paramdecl" (316) 62 72
"string_literal" (317) 5 58
"type_var" (318) 6 59
"typevardecl" (319) 61 71
"vardecl" (320) 60 70
TYPE_VAR_ID (321) 6 71


Nonterminals, with rules where they appear

$accept (69)
    on left: 0
program (70)
    on left: 1, on right: 0
expr (71)
    on left: 2 3 4 5 6, on right: 1 77 82
operands (72)
    on left: 7, on right: 2
ast_node_type (73)
    on left: 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
    27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
    48 49 50 51 52, on right: 2 55
id (74)
    on left: 53 54, on right: 3
other_id (75)
    on left: 55 56 57 58 59 60 61 62 63 64 65 66 67, on right: 54
decls (76)
    on left: 68 69, on right: 1 69
decl (77)
    on left: 70 71 72 73 74 75 76, on right: 69
type (78)
    on left: 77, on right: 70 71 72 73 74
index (79)
    on left: 78, on right: 3 6 70 71 72 73 74 75 76
decl_ref (80)
    on left: 79, on right: 70 72 73 74 84
index_list (81)
    on left: 80, on right: 74 75 76
__0 (82)
    on left: 81 82, on right: 7 82
__1 (83)
    on left: 83 84, on right: 80 84


state 0

    0 $accept: . program $end

    "("  shift, and go to state 1

    program  go to state 2
    expr     go to state 3


state 1

    2 expr: "(" . ast_node_type "int_literal" operands ")"
    3     | "(" . "id" "int_literal" id index ")"
    4     | "(" . "int_literal" "int_literal" "int_literal" ")"
    5     | "(" . "string_literal" "int_literal" STRING_LITERAL ")"
    6     | "(" . "type_var" "int_literal" TYPE_VAR_ID index ")"

    "and"                shift, and go to state 4
    "assign"             shift, and go to state 5
    "attributeref"       shift, and go to state 6
    "binop"              shift, and go to state 7
    "break"              shift, and go to state 8
    "call"               shift, and go to state 9
    "call1"              shift, and go to state 10
    "class"              shift, and go to state 11
    "compare"            shift, and go to state 12
    "continue"           shift, and go to state 13
    "def"                shift, and go to state 14
    "dict_display"       shift, and go to state 15
    "False"              shift, and go to state 16
    "for"                shift, and go to state 17
    "formals_list"       shift, and go to state 18
    "function_type"      shift, and go to state 19
    "if"                 shift, and go to state 20
    "if_expr"            shift, and go to state 21
    "int_literal"        shift, and go to state 22
    "left_compare"       shift, and go to state 23
    "list_display"       shift, and go to state 24
    "method"             shift, and go to state 25
    "module"             shift, and go to state 26
    "native"             shift, and go to state 27
    "next_value"         shift, and go to state 28
    "new"                shift, and go to state 29
    "None"               shift, and go to state 30
    "or"                 shift, and go to state 31
    "pair"               shift, and go to state 32
    "print"              shift, and go to state 33
    "println"            shift, and go to state 34
    "return"             shift, and go to state 35
    "slice"              shift, and go to state 36
    "slice_assign"       shift, and go to state 37
    "stmt_list"          shift, and go to state 38
    "subscript"          shift, and go to state 39
    "subscript_assign"   shift, and go to state 40
    "target_list"        shift, and go to state 41
    "True"               shift, and go to state 42
    "tuple"              shift, and go to state 43
    "type"               shift, and go to state 44
    "typed_id"           shift, and go to state 45
    "type_formals_list"  shift, and go to state 46
    "type_list"          shift, and go to state 47
    "unop"               shift, and go to state 48
    "while"              shift, and go to state 49
    "id"                 shift, and go to state 50
    "string_literal"     shift, and go to state 51
    "type_var"           shift, and go to state 52

    ast_node_type  go to state 53


state 2

    0 $accept: program . $end

    $end  shift, and go to state 54


state 3

    1 program: expr . decls

    $default  reduce using rule 68 (decls)

    decls  go to state 55


state 4

    8 ast_node_type: "and" .

    $default  reduce using rule 8 (ast_node_type)


state 5

    9 ast_node_type: "assign" .

    $default  reduce using rule 9 (ast_node_type)


state 6

   10 ast_node_type: "attributeref" .

    $default  reduce using rule 10 (ast_node_type)


state 7

   11 ast_node_type: "binop" .

    $default  reduce using rule 11 (ast_node_type)


state 8

   12 ast_node_type: "break" .

    $default  reduce using rule 12 (ast_node_type)


state 9

   13 ast_node_type: "call" .

    $default  reduce using rule 13 (ast_node_type)


state 10

   14 ast_node_type: "call1" .

    $default  reduce using rule 14 (ast_node_type)


state 11

   15 ast_node_type: "class" .

    $default  reduce using rule 15 (ast_node_type)


state 12

   16 ast_node_type: "compare" .

    $default  reduce using rule 16 (ast_node_type)


state 13

   17 ast_node_type: "continue" .

    $default  reduce using rule 17 (ast_node_type)


state 14

   18 ast_node_type: "def" .

    $default  reduce using rule 18 (ast_node_type)


state 15

   19 ast_node_type: "dict_display" .

    $default  reduce using rule 19 (ast_node_type)


state 16

   20 ast_node_type: "False" .

    $default  reduce using rule 20 (ast_node_type)


state 17

   21 ast_node_type: "for" .

    $default  reduce using rule 21 (ast_node_type)


state 18

   22 ast_node_type: "formals_list" .

    $default  reduce using rule 22 (ast_node_type)


state 19

   23 ast_node_type: "function_type" .

    $default  reduce using rule 23 (ast_node_type)


state 20

   24 ast_node_type: "if" .

    $default  reduce using rule 24 (ast_node_type)


state 21

   25 ast_node_type: "if_expr" .

    $default  reduce using rule 25 (ast_node_type)


state 22

    4 expr: "(" "int_literal" . "int_literal" "int_literal" ")"

    "int_literal"  shift, and go to state 56


state 23

   26 ast_node_type: "left_compare" .

    $default  reduce using rule 26 (ast_node_type)


state 24

   27 ast_node_type: "list_display" .

    $default  reduce using rule 27 (ast_node_type)


state 25

   28 ast_node_type: "method" .

    $default  reduce using rule 28 (ast_node_type)


state 26

   29 ast_node_type: "module" .

    $default  reduce using rule 29 (ast_node_type)


state 27

   30 ast_node_type: "native" .

    $default  reduce using rule 30 (ast_node_type)


state 28

   31 ast_node_type: "next_value" .

    $default  reduce using rule 31 (ast_node_type)


state 29

   32 ast_node_type: "new" .

    $default  reduce using rule 32 (ast_node_type)


state 30

   33 ast_node_type: "None" .

    $default  reduce using rule 33 (ast_node_type)


state 31

   34 ast_node_type: "or" .

    $default  reduce using rule 34 (ast_node_type)


state 32

   35 ast_node_type: "pair" .

    $default  reduce using rule 35 (ast_node_type)


state 33

   36 ast_node_type: "print" .

    $default  reduce using rule 36 (ast_node_type)


state 34

   37 ast_node_type: "println" .

    $default  reduce using rule 37 (ast_node_type)


state 35

   38 ast_node_type: "return" .

    $default  reduce using rule 38 (ast_node_type)


state 36

   39 ast_node_type: "slice" .

    $default  reduce using rule 39 (ast_node_type)


state 37

   40 ast_node_type: "slice_assign" .

    $default  reduce using rule 40 (ast_node_type)


state 38

   41 ast_node_type: "stmt_list" .

    $default  reduce using rule 41 (ast_node_type)


state 39

   42 ast_node_type: "subscript" .

    $default  reduce using rule 42 (ast_node_type)


state 40

   43 ast_node_type: "subscript_assign" .

    $default  reduce using rule 43 (ast_node_type)


state 41

   44 ast_node_type: "target_list" .

    $default  reduce using rule 44 (ast_node_type)


state 42

   45 ast_node_type: "True" .

    $default  reduce using rule 45 (ast_node_type)


state 43

   46 ast_node_type: "tuple" .

    $default  reduce using rule 46 (ast_node_type)


state 44

   47 ast_node_type: "type" .

    $default  reduce using rule 47 (ast_node_type)


state 45

   48 ast_node_type: "typed_id" .

    $default  reduce using rule 48 (ast_node_type)


state 46

   49 ast_node_type: "type_formals_list" .

    $default  reduce using rule 49 (ast_node_type)


state 47

   50 ast_node_type: "type_list" .

    $default  reduce using rule 50 (ast_node_type)


state 48

   51 ast_node_type: "unop" .

    $default  reduce using rule 51 (ast_node_type)


state 49

   52 ast_node_type: "while" .

    $default  reduce using rule 52 (ast_node_type)


state 50

    3 expr: "(" "id" . "int_literal" id index ")"

    "int_literal"  shift, and go to state 57


state 51

    5 expr: "(" "string_literal" . "int_literal" STRING_LITERAL ")"

    "int_literal"  shift, and go to state 58


state 52

    6 expr: "(" "type_var" . "int_literal" TYPE_VAR_ID index ")"

    "int_literal"  shift, and go to state 59


state 53

    2 expr: "(" ast_node_type . "int_literal" operands ")"

    "int_literal"  shift, and go to state 60


state 54

    0 $accept: program $end .

    $default  accept


state 55

    1 program: expr decls .
   69 decls: decls . decl

    "("  shift, and go to state 61

    $default  reduce using rule 1 (program)

    decl  go to state 62


state 56

    4 expr: "(" "int_literal" "int_literal" . "int_literal" ")"

    "int_literal"  shift, and go to state 63


state 57

    3 expr: "(" "id" "int_literal" . id index ")"

    "and"                shift, and go to state 4
    "assign"             shift, and go to state 5
    "attributeref"       shift, and go to state 6
    "binop"              shift, and go to state 7
    "break"              shift, and go to state 8
    "call"               shift, and go to state 9
    "call1"              shift, and go to state 10
    "class"              shift, and go to state 11
    "compare"            shift, and go to state 12
    "continue"           shift, and go to state 13
    "def"                shift, and go to state 14
    "dict_display"       shift, and go to state 15
    "False"              shift, and go to state 16
    "for"                shift, and go to state 17
    "formals_list"       shift, and go to state 18
    "function_type"      shift, and go to state 19
    ID                   shift, and go to state 64
    "if"                 shift, and go to state 20
    "if_expr"            shift, and go to state 21
    "int_literal"        shift, and go to state 65
    "left_compare"       shift, and go to state 23
    "list_display"       shift, and go to state 24
    "method"             shift, and go to state 25
    "module"             shift, and go to state 26
    "native"             shift, and go to state 27
    "next_value"         shift, and go to state 28
    "new"                shift, and go to state 29
    "None"               shift, and go to state 30
    "or"                 shift, and go to state 31
    "pair"               shift, and go to state 32
    "print"              shift, and go to state 33
    "println"            shift, and go to state 34
    "return"             shift, and go to state 35
    "slice"              shift, and go to state 36
    "slice_assign"       shift, and go to state 37
    "stmt_list"          shift, and go to state 38
    "subscript"          shift, and go to state 39
    "subscript_assign"   shift, and go to state 40
    "target_list"        shift, and go to state 41
    "True"               shift, and go to state 42
    "tuple"              shift, and go to state 43
    "type"               shift, and go to state 44
    "typed_id"           shift, and go to state 45
    "type_formals_list"  shift, and go to state 46
    "type_list"          shift, and go to state 47
    "unop"               shift, and go to state 48
    "while"              shift, and go to state 49
    "classdecl"          shift, and go to state 66
    "funcdecl"           shift, and go to state 67
    "id"                 shift, and go to state 68
    "index_list"         shift, and go to state 69
    "instancedecl"       shift, and go to state 70
    "moduledecl"         shift, and go to state 71
    "paramdecl"          shift, and go to state 72
    "string_literal"     shift, and go to state 73
    "type_var"           shift, and go to state 74
    "typevardecl"        shift, and go to state 75
    "vardecl"            shift, and go to state 76

    ast_node_type  go to state 77
    id             go to state 78
    other_id       go to state 79


state 58

    5 expr: "(" "string_literal" "int_literal" . STRING_LITERAL ")"

    STRING_LITERAL  shift, and go to state 80


state 59

    6 expr: "(" "type_var" "int_literal" . TYPE_VAR_ID index ")"

    TYPE_VAR_ID  shift, and go to state 81


state 60

    2 expr: "(" ast_node_type "int_literal" . operands ")"

    $default  reduce using rule 81 (__0)

    operands  go to state 82
    __0       go to state 83


state 61

   70 decl: "(" . "vardecl" index ID decl_ref type ")"
   71     | "(" . "typevardecl" index TYPE_VAR_ID type ")"
   72     | "(" . "paramdecl" index ID decl_ref "int_literal" type ")"
   73     | "(" . "instancedecl" index ID decl_ref type ")"
   74     | "(" . "funcdecl" index ID decl_ref type index_list ")"
   75     | "(" . "classdecl" index ID index_list index_list ")"
   76     | "(" . "moduledecl" index ID index_list ")"

    "classdecl"     shift, and go to state 84
    "funcdecl"      shift, and go to state 85
    "instancedecl"  shift, and go to state 86
    "moduledecl"    shift, and go to state 87
    "paramdecl"     shift, and go to state 88
    "typevardecl"   shift, and go to state 89
    "vardecl"       shift, and go to state 90


state 62

   69 decls: decls decl .

    $default  reduce using rule 69 (decls)


state 63

    4 expr: "(" "int_literal" "int_literal" "int_literal" . ")"

    ")"  shift, and go to state 91


state 64

   53 id: ID .

    $default  reduce using rule 53 (id)


state 65

   57 other_id: "int_literal" .

    $default  reduce using rule 57 (other_id)


state 66

   65 other_id: "classdecl" .

    $default  reduce using rule 65 (other_id)


state 67

   64 other_id: "funcdecl" .

    $default  reduce using rule 64 (other_id)


state 68

   56 other_id: "id" .

    $default  reduce using rule 56 (other_id)


state 69

   67 other_id: "index_list" .

    $default  reduce using rule 67 (other_id)


state 70

   63 other_id: "instancedecl" .

    $default  reduce using rule 63 (other_id)


state 71

   66 other_id: "moduledecl" .

    $default  reduce using rule 66 (other_id)


state 72

   62 other_id: "paramdecl" .

    $default  reduce using rule 62 (other_id)


state 73

   58 other_id: "string_literal" .

    $default  reduce using rule 58 (other_id)


state 74

   59 other_id: "type_var" .

    $default  reduce using rule 59 (other_id)


state 75

   61 other_id: "typevardecl" .

    $default  reduce using rule 61 (other_id)


state 76

   60 other_id: "vardecl" .

    $default  reduce using rule 60 (other_id)


state 77

   55 other_id: ast_node_type .

    $default  reduce using rule 55 (other_id)


state 78

    3 expr: "(" "id" "int_literal" id . index ")"

    "int_literal"  shift, and go to state 92

    index  go to state 93


state 79

   54 id: other_id .

    $default  reduce using rule 54 (id)


state 80

    5 expr: "(" "string_literal" "int_literal" STRING_LITERAL . ")"

    ")"  shift, and go to state 94


state 81

    6 expr: "(" "type_var" "int_literal" TYPE_VAR_ID . index ")"

    "int_literal"  shift, and go to state 92

    index  go to state 95


state 82

    2 expr: "(" ast_node_type "int_literal" operands . ")"

    ")"  shift, and go to state 96


state 83

    7 operands: __0 .
   82 __0: __0 . expr

    "("  shift, and go to state 1

    $default  reduce using rule 7 (operands)

    expr  go to state 97


state 84

   75 decl: "(" "classdecl" . index ID index_list index_list ")"

    "int_literal"  shift, and go to state 92

    index  go to state 98


state 85

   74 decl: "(" "funcdecl" . index ID decl_ref type index_list ")"

    "int_literal"  shift, and go to state 92

    index  go to state 99


state 86

   73 decl: "(" "instancedecl" . index ID decl_ref type ")"

    "int_literal"  shift, and go to state 92

    index  go to state 100


state 87

   76 decl: "(" "moduledecl" . index ID index_list ")"

    "int_literal"  shift, and go to state 92

    index  go to state 101


state 88

   72 decl: "(" "paramdecl" . index ID decl_ref "int_literal" type ")"

    "int_literal"  shift, and go to state 92

    index  go to state 102


state 89

   71 decl: "(" "typevardecl" . index TYPE_VAR_ID type ")"

    "int_literal"  shift, and go to state 92

    index  go to state 103


state 90

   70 decl: "(" "vardecl" . index ID decl_ref type ")"

    "int_literal"  shift, and go to state 92

    index  go to state 104


state 91

    4 expr: "(" "int_literal" "int_literal" "int_literal" ")" .

    $default  reduce using rule 4 (expr)


state 92

   78 index: "int_literal" .

    $default  reduce using rule 78 (index)


state 93

    3 expr: "(" "id" "int_literal" id index . ")"

    ")"  shift, and go to state 105


state 94

    5 expr: "(" "string_literal" "int_literal" STRING_LITERAL ")" .

    $default  reduce using rule 5 (expr)


state 95

    6 expr: "(" "type_var" "int_literal" TYPE_VAR_ID index . ")"

    ")"  shift, and go to state 106


state 96

    2 expr: "(" ast_node_type "int_literal" operands ")" .

    $default  reduce using rule 2 (expr)


state 97

   82 __0: __0 expr .

    $default  reduce using rule 82 (__0)


state 98

   75 decl: "(" "classdecl" index . ID index_list index_list ")"

    ID  shift, and go to state 107


state 99

   74 decl: "(" "funcdecl" index . ID decl_ref type index_list ")"

    ID  shift, and go to state 108


state 100

   73 decl: "(" "instancedecl" index . ID decl_ref type ")"

    ID  shift, and go to state 109


state 101

   76 decl: "(" "moduledecl" index . ID index_list ")"

    ID  shift, and go to state 110


state 102

   72 decl: "(" "paramdecl" index . ID decl_ref "int_literal" type ")"

    ID  shift, and go to state 111


state 103

   71 decl: "(" "typevardecl" index . TYPE_VAR_ID type ")"

    TYPE_VAR_ID  shift, and go to state 112


state 104

   70 decl: "(" "vardecl" index . ID decl_ref type ")"

    ID  shift, and go to state 113


state 105

    3 expr: "(" "id" "int_literal" id index ")" .

    $default  reduce using rule 3 (expr)


state 106

    6 expr: "(" "type_var" "int_literal" TYPE_VAR_ID index ")" .

    $default  reduce using rule 6 (expr)


state 107

   75 decl: "(" "classdecl" index ID . index_list index_list ")"

    "("  shift, and go to state 114

    index_list  go to state 115


state 108

   74 decl: "(" "funcdecl" index ID . decl_ref type index_list ")"

    "int_literal"  shift, and go to state 116

    decl_ref  go to state 117


state 109

   73 decl: "(" "instancedecl" index ID . decl_ref type ")"

    "int_literal"  shift, and go to state 116

    decl_ref  go to state 118


state 110

   76 decl: "(" "moduledecl" index ID . index_list ")"

    "("  shift, and go to state 114

    index_list  go to state 119


state 111

   72 decl: "(" "paramdecl" index ID . decl_ref "int_literal" type ")"

    "int_literal"  shift, and go to state 116

    decl_ref  go to state 120


state 112

   71 decl: "(" "typevardecl" index TYPE_VAR_ID . type ")"

    "("  shift, and go to state 1

    expr  go to state 121
    type  go to state 122


state 113

   70 decl: "(" "vardecl" index ID . decl_ref type ")"

    "int_literal"  shift, and go to state 116

    decl_ref  go to state 123


state 114

   80 index_list: "(" . "index_list" __1 ")"

    "index_list"  shift, and go to state 124


state 115

   75 decl: "(" "classdecl" index ID index_list . index_list ")"

    "("  shift, and go to state 114

    index_list  go to state 125


state 116

   79 decl_ref: "int_literal" .

    $default  reduce using rule 79 (decl_ref)


state 117

   74 decl: "(" "funcdecl" index ID decl_ref . type index_list ")"

    "("  shift, and go to state 1

    expr  go to state 121
    type  go to state 126


state 118

   73 decl: "(" "instancedecl" index ID decl_ref . type ")"

    "("  shift, and go to state 1

    expr  go to state 121
    type  go to state 127


state 119

   76 decl: "(" "moduledecl" index ID index_list . ")"

    ")"  shift, and go to state 128


state 120

   72 decl: "(" "paramdecl" index ID decl_ref . "int_literal" type ")"

    "int_literal"  shift, and go to state 129


state 121

   77 type: expr .

    $default  reduce using rule 77 (type)


state 122

   71 decl: "(" "typevardecl" index TYPE_VAR_ID type . ")"

    ")"  shift, and go to state 130


state 123

   70 decl: "(" "vardecl" index ID decl_ref . type ")"

    "("  shift, and go to state 1

    expr  go to state 121
    type  go to state 131


state 124

   80 index_list: "(" "index_list" . __1 ")"

    $default  reduce using rule 83 (__1)

    __1  go to state 132


state 125

   75 decl: "(" "classdecl" index ID index_list index_list . ")"

    ")"  shift, and go to state 133


state 126

   74 decl: "(" "funcdecl" index ID decl_ref type . index_list ")"

    "("  shift, and go to state 114

    index_list  go to state 134


state 127

   73 decl: "(" "instancedecl" index ID decl_ref type . ")"

    ")"  shift, and go to state 135


state 128

   76 decl: "(" "moduledecl" index ID index_list ")" .

    $default  reduce using rule 76 (decl)


state 129

   72 decl: "(" "paramdecl" index ID decl_ref "int_literal" . type ")"

    "("  shift, and go to state 1

    expr  go to state 121
    type  go to state 136


state 130

   71 decl: "(" "typevardecl" index TYPE_VAR_ID type ")" .

    $default  reduce using rule 71 (decl)


state 131

   70 decl: "(" "vardecl" index ID decl_ref type . ")"

    ")"  shift, and go to state 137


state 132

   80 index_list: "(" "index_list" __1 . ")"
   84 __1: __1 . decl_ref

    "int_literal"  shift, and go to state 116
    ")"            shift, and go to state 138

    decl_ref  go to state 139


state 133

   75 decl: "(" "classdecl" index ID index_list index_list ")" .

    $default  reduce using rule 75 (decl)


state 134

   74 decl: "(" "funcdecl" index ID decl_ref type index_list . ")"

    ")"  shift, and go to state 140


state 135

   73 decl: "(" "instancedecl" index ID decl_ref type ")" .

    $default  reduce using rule 73 (decl)


state 136

   72 decl: "(" "paramdecl" index ID decl_ref "int_literal" type . ")"

    ")"  shift, and go to state 141


state 137

   70 decl: "(" "vardecl" index ID decl_ref type ")" .

    $default  reduce using rule 70 (decl)


state 138

   80 index_list: "(" "index_list" __1 ")" .

    $default  reduce using rule 80 (index_list)


state 139

   84 __1: __1 decl_ref .

    $default  reduce using rule 84 (__1)


state 140

   74 decl: "(" "funcdecl" index ID decl_ref type index_list ")" .

    $default  reduce using rule 74 (decl)


state 141

   72 decl: "(" "paramdecl" index ID decl_ref "int_literal" type ")" .

    $default  reduce using rule 72 (decl)
