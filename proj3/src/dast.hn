/* -*- mode: fundamental; c-file-style: "stroustrup"; indent-tabs-mode: nil -*- */

/* AST parser for apyc phases. */

/* Authors: P. N. Hilfinger */

%define semantic_tree_type "AST"

%{
    #include <string>
    #include <cstring>
    #include "apyc.h"
    #include "dast.h"

    using namespace std;

    static GCINIT _gcdummy;

    static AST_Ptr theTree;
    static int pass;
    class yyvar;
   
    /** Return a location string (Unix format) formed from the name of
     *  the source file producing this AST and the number in NODE (an
     *  INT token). */
    static const char* make_ast_loc (AST* node);
    void parse_error (const char* loc, const char* message, ...);

    /** Set the decl decoration of NODE to the Decl with with index INDEX. */
    static void setDecl (AST_Ptr node, AST_Ptr index);
    /** Set the list of members of DECL to MEMBERS. The elements of MEMBERS
     *  are actually Decl*s, disguised as AST_Ptrs. */
    static void setMembers (Decl* decl, gcvector<AST_Ptr>* members);
    /** Set the list of type formals for DECL to FORMALS. The elements of FORMALS
     *  are actually Decl*s, disguised as AST_Ptrs. */
    static void setTypeFormals (Decl* decl, gcvector<AST_Ptr>* formals);
    /** Return the Decl with index INDEX, or NULL if there is no such Decl. */
    static Decl* getDecl (size_t index);
    /** Return the Decl with index given by the integer value of the
     *  token INDEX, or NULL if there is no such Decl. */
    static Decl* getDecl (AST_Ptr index);
    /** Return the Decl with index given by the integer value of the
     *  token in INDEX, or NULL if there is no such Decl. */
    static Decl* getDecl (yyvar& index);
    /** Return the integer value of the token K. */
    static int intValue (yyvar& index);

    /** Add DECL to the set of known Decls returnable by getDecl. */
    static void addDecl (Decl* decl);

%}

%debug
%define error_function parse_error

%token AND "and"
%token ASSIGN "assign"
%token ATTRIBUTEREF "attributeref"
%token BINOP "binop"
%token BREAK "break"
%token CALL "call"
%token CALL1 "call1"
%token CLASS "class"
%token COMPARE "compare"
%token CONTINUE "continue"
%token DEDENT
%token DEF "def"
%token DICT_DISPLAY "dict_display"
%token FALSE "False"
%token FOR "for"
%token FORMALS_LIST "formals_list"
%token FUNCTION_TYPE "function_type"
%token ID
%token IF "if"
%token IF_EXPR "if_expr"
%token INDENT 
%token INT_LITERAL "int_literal"
%token LEFT_COMPARE "left_compare"
%token LIST_DISPLAY "list_display"
%token METHOD "method"
%token MODULE "module"
%token NATIVE "native"
%token NEXT_VALUE "next_value"
%token NEW "new"
%token NONE "None"
%token NOT "not"
%token OR "or"
%token PAIR "pair"
%token PRINT "print"
%token PRINTLN "println"
%token RETURN "return"
%token SLICE "slice"
%token SLICE_ASSIGN "slice_assign"
%token STMT_LIST "stmt_list"
%token STRING_LITERAL
%token SUBSCRIPT "subscript"
%token SUBSCRIPT_ASSIGN "subscript_assign"
%token TARGET_LIST "target_list"
%token TRUE "True"
%token TUPLE "tuple"
%token TYPE "type"
%token TYPED_ID "typed_id"
%token TYPE_FORMALS_LIST "type_formals_list"
%token TYPE_LIST "type_list"
%token TYPE_VAR
%token UNOP "unop"
%token WHILE "while"

%%

                    /* Lexical Rules */

ID: (_LETTER | "_")  (_LETTER | _DIGIT | "_")* 
    ;

TYPE_VAR_ID : "$" "#"? (_LETTER | _DIGIT | "_")*
    ;

INT_LITERAL: _DIGIT+
    ;

_OCT: '0' .. '7' ;

STRING_LITERAL: '"' (_ANY - '\\' - '"' | '\\' _OCT _OCT _OCT)* '"' 
    ;

*: ' ' | '\t' | '\n' | '\r'
    ;

                        /* Main Grammar */

program: expr decls    { theTree = $expr.value (); }
    ;


expr: "("! ast_node_type num=INT_LITERAL operands ")"!
                  { $$ = $^($ast_node_type.value (), 
                            $operands.list_value ());
                    $$.set_loc (make_ast_loc ($INT_LITERAL.value ()));
                  }
    | "(" "id" INT_LITERAL id index ")"
                  { $$ = $id;
                    $$.set_loc (make_ast_loc ($INT_LITERAL.value ())); 
                    if (pass == 2)
                        setDecl ($$.value (), $index.value ());
                  }
    | "(" "int_literal" num=INT_LITERAL val=INT_LITERAL ")"
                  { $$ = $val;
                    $$.set_loc (make_ast_loc ($num.value ())); }
    | "(" "string_literal" INT_LITERAL STRING_LITERAL ")"
                  { $$ = $STRING_LITERAL;
                    $$.set_loc (make_ast_loc ($INT_LITERAL.value ())); }
    | "(" "type_var" INT_LITERAL TYPE_VAR_ID index ")"
                  { $$ = $^ (TYPE_VAR, $TYPE_VAR_ID.value ());
                    $$.set_loc (make_ast_loc ($INT_LITERAL.value ())); 
                    if (pass == 2)
                        setDecl ($$.value (), $index.value ());
                  }
    ;

operands:
      expr*
    ;

ast_node_type:
      "and"
    | "assign"
    | "attributeref"
    | "binop"
    | "break"
    | "call"
    | "call1"
    | "class"
    | "compare"
    | "continue"
    | "def"
    | "dict_display"
    | "False"
    | "for"
    | "formals_list"
    | "function_type"
    | "if"
    | "if_expr"
    | "left_compare"
    | "list_display"
    | "method"
    | "module"
    | "native"
    | "next_value"
    | "new"
    | "None"
    | "or"
    | "pair"
    | "print"
    | "println"
    | "return"
    | "slice"
    | "slice_assign"
    | "stmt_list"
    | "subscript"
    | "subscript_assign"
    | "target_list"
    | "True"
    | "tuple"
    | "type"
    | "typed_id"
    | "type_formals_list"
    | "type_list"
    | "unop"
    | "while"
    ;

id:   ID
    | other_id
           { $$ = AST::make_token (ID, $other_id.value()->text_size (),
                                   $other_id.value()->as_chars ()); }
    ;

other_id:
      ast_node_type
    | "id" 
    | "int_literal"
    | "string_literal"
    | "type_var"
    | "vardecl"
    | "typevardecl"
    | "paramdecl"
    | "instancedecl"
    | "funcdecl" 
    | "classdecl"
    | "moduledecl"
    | "index_list"
    ;


decls :
      /* Empty */
    | decls decl     {  }
    ;

decl : 
      "(" "vardecl" index ID decl_ref type ")"
            { if (pass == 1) 
                  addDecl(makeVarDecl (intValue($index),
                                       $ID.value ()->as_string (),
                                       getDecl ($decl_ref)));
              else {
                  Decl* decl = getDecl ($index);
                  decl->setType ($type.value ()->asType ());
              }
            }
    | "(" "typevardecl" index TYPE_VAR_ID type ")"
            { if (pass == 1) 
                  addDecl (makeTypeVarDecl (intValue($index),
                                            $TYPE_VAR_ID.value ()->as_string ()));
              else {
                  Decl* decl = getDecl ($index);
                  decl->setAst ($type.value ());
              }
            }
    | "(" "paramdecl" index ID decl_ref INT_LITERAL type ")"
            { if (pass == 1) 
                  addDecl (makeParamDecl (intValue($index),
                                          $ID.value ()->as_string (),
                                          getDecl ($decl_ref),
                                          $INT_LITERAL.value ()->intValue ()));
              else {
                  Decl* decl = getDecl ($index);
                  decl->setType ($type.value ()->asType ());
              }
            }
    | "(" "instancedecl" index ID decl_ref type ")"
            { if (pass == 1) 
                  addDecl (makeVarDecl (intValue($index),
                                        $ID.value ()->as_string (),
                                        getDecl ($decl_ref)));
              else {
                  Decl* decl = getDecl ($index);
                  decl->setType ($type.value ()->asType ());
              }
            }
    | "(" "funcdecl" index ID decl_ref type index_list ")"
            { if (pass == 1) 
                  addDecl (makeFuncDecl (intValue($index),
                                         $ID.value ()->as_string (),
                                         getDecl ($decl_ref)));
              else {
                  Decl* decl = getDecl ($index);
                  decl->setType ($type.value ()->asType ());
                  setMembers (decl, $index_list.list_value ());
              }
            }
    | "(" "classdecl" index ID type_formals=index_list members=index_list ")"
            { if (pass == 1) 
                  addDecl (makeClassDecl (intValue($index),
                                          $ID.value ()->as_string ()));
              else {
                  Decl* decl = getDecl ($index);
                  setTypeFormals (decl, $type_formals.list_value ());
                  setMembers (decl, $members.list_value ());
              }
            }
    | "(" "moduledecl" index ID index_list ")"
            { if (pass == 1) 
                  addDecl (makeModuleDecl (intValue($index),
                                           $ID.value ()->as_string ()));
              else {
                  Decl* decl = getDecl ($index);
                  setMembers (decl, $index_list.list_value ());
              }
            }
    ;

type : expr
    ;

index : INT_LITERAL
    ;

decl_ref : INT_LITERAL
    ;

index_list :
      "("! "index_list"! decl_ref* ")"!
    ;


%%

static gcstring current_python_file;
static gcstring current_ast_file;
static gcvector<Decl*> allDecls;


const char*
AST::lineNumber ()
{
    if (loc () == NULL)
        return "0";
    const char* suffix = strrchr (loc (), ':');
    if (suffix == NULL)
        return "0";
    return suffix + 1;
}

void
parse_error (const char* loc, const char* message, ...)
{
    if (loc == NULL)
        error ((current_ast_file + ":?").c_str (), message);
    else {
        char *place = new char[current_ast_file.size() + 12];
        sprintf(place, "%s:%d", current_ast_file.c_str (),
                yylocation_line (loc));
        error (place, message);
    }
    fatal ("bad AST");
}

static const char*
make_ast_loc (AST* node)
{
    return GC_strdup ((current_python_file + ":" + node->as_string ()).c_str ());
}

static void
setDecl (AST_Ptr node, AST_Ptr index)
{
    node->setDecl (getDecl (index->intValue ()));
}  


static void
setMembers (Decl* decl, gcvector<AST_Ptr>* members)
{
    for (size_t i = 0; i < members->size (); i += 1) {
        decl->addMember (getDecl ((*members)[i]));
    }
}

static void
setTypeFormals (Decl* decl, gcvector<AST_Ptr>* formals)
{
    for (size_t i = 0; i < formals->size (); i += 1) {
        decl->addTypeFormal (getDecl ((*formals)[i]));
    }
}

static int
intValue (yyvar& k)
{
    return k.value ()->intValue ();
}

static Decl*
getDecl (size_t k)
{
    if (k >= allDecls.size ())
        return NULL;
    else
        return allDecls[k];
}

static Decl*
getDecl (AST_Ptr index)
{
    return getDecl (index->intValue ());
}

static Decl*
getDecl (yyvar& index)
{
    return getDecl (intValue (index));
}

static void
addDecl (Decl* decl)
{
    size_t k = decl->getIndex ();
    if (k >= allDecls.size ())
        allDecls.insert (allDecls.end (), k - allDecls.size () + 1, NULL);
    allDecls[k] = decl;
    setBuiltinDecl (decl);
}

AST_Ptr
readDast (const gcstring& dast_file_name,
         const gcstring& python_file_name)
{
    current_ast_file = dast_file_name;

    for (pass = 1; pass <= 2; pass += 1) {
        FILE* f = fopen (dast_file_name.c_str (), "r");

        if (f == NULL) {
            errorNoFile ("Could not open %s", dast_file_name.c_str ());
            return NULL;
        }
        yypush_lexer (f, dast_file_name);
        current_python_file = python_file_name;
        theTree = NULL;
        yyparse ();
        fclose (f);
        yypop_lexer ();
    }
            
    return theTree;
}

void
printDecls (ostream& out)
{
    for (size_t i = 0; i < allDecls.size (); i += 1) {
        if (allDecls[i] != NULL) {
            allDecls[i]->print (out);
            out << endl;
        }
    }
}
